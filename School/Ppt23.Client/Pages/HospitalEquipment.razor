@page "/hospital-equipment"
@using Ppt23.Shared;
@using Ppt23.Client.Components;
@inject HttpClient Http; 

<h2 class="text-3xl font-bold mb-4">Hospital Equipment</h2>

<div class="container mx-auto bg-neutral-200 p-4 px-4 py-4 max-w-6xl">
    <div class="text-lg font-semibold mb-2">Number of Equipment: @listEquipment?.Count</div>
    <!--<button class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded mb-3>New List</button>-->
    <button class="bg-emerald-500 hover:bg-emerald-300 text-white font-bold py-2 px-4 rounded mb-3" @onclick="()=> {newModel = EquipmentVm.RtnRndList(1).First();isInNewMode = true;}"> New Item</button>
    <div class=" bg-green-200 grid grid-cols-6 p-2 px-1 py-1">
        <div class="font-bold text-sm ml-2">Name</div>
        <div class="font-bold text-sm">Bought Date</div>
        <div class="font-bold text-sm">Last Revision Date</div>
        <div class="font-bold text-sm">Price</div>
        <div class="font-bold text-sm">Revision Needed</div>
        <div class="font-bold text-sm">Actions</div>
    </div>

    @if (isInNewMode)
    {
        ArgumentNullException.ThrowIfNull(newModel);

        <EquipmentRow IsInEditMode=true Equi="newModel" EditDoneEventCallback="() => CreateEquipment(newModel)">
            <button type="submit" class="btn bg-teal-500">Add</button>
            <button type="button" @onclick="() => isInNewMode = false" class="btn bg-teal-700 ml-2">Cancel</button>
        </EquipmentRow>
    }

    @foreach (EquipmentVm equipment in listEquipment)
    {
        <EquipmentRow Equi="@equipment" OnDelete="() => DeleteEquipment(equipment)" EditDoneEventCallback="async (updatedEquipment) => await UpdateEquipment(updatedEquipment)" OnRevision="async () => await PerformRevision(equipment)" />
    }


</div>

@code {
    bool isInNewMode;
    EquipmentVm? newModel;
    List<EquipmentVm> listEquipment = new List<EquipmentVm>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        listEquipment = await Http.GetFromJsonAsync<List<EquipmentVm>>("/hospital-equipment") ?? new List<EquipmentVm>();
    }


    private async Task DeleteEquipment(EquipmentVm equipment)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"hospital-equipment/{equipment.Id}");

        if (response.IsSuccessStatusCode)
        {
            listEquipment.Remove(equipment);
            Console.WriteLine("Item deleted successfully.");
        } else
        {
            Console.WriteLine("Failed to delete item. Please refresh the page.");
        }
    }
    private async Task UpdateEquipment (EquipmentVm updatedEquipment)
    {
        HttpResponseMessage response = await Http.PutAsJsonAsync($"hospital-equipment/{updatedEquipment.Id}", updatedEquipment);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Item updated successfully.");
        }
        else
        {
            Console.WriteLine("Failed to update item. Please refresh the page.");
        }
    }
    private async Task CreateEquipment (EquipmentVm newEquipment)
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync($"hospital-equipment", newEquipment);

        if (response.IsSuccessStatusCode)
        {
            EquipmentVm createdEquipment = await response.Content.ReadFromJsonAsync<EquipmentVm>();
            if (createdEquipment != null)
			{
				newEquipment.Id = createdEquipment.Id;
                listEquipment.Insert(0, newEquipment);
                isInNewMode = false;
                Console.WriteLine("Item created successfully.");
			}
        }
        else
        {
            Console.WriteLine("Failed to create item. Please refresh the page.");
        }
    }

    private async Task PerformRevision(EquipmentVm equipment)
    {
        equipment.LastRevisionDate = DateTime.Now;

        HttpResponseMessage response = await Http.PostAsJsonAsync("/revision", equipment);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Revision performed successfully.");
        }
        else
        {
            Console.WriteLine("Failed to perform revision. Please refresh the page.");
        }

    }


}